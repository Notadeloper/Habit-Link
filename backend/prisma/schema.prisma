// This is your Prisma schema file

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

enum FrequencyPeriod {
  day
  week
  month
}

model User {
  id                       String                    @id @default(uuid())
  username                 String                    @unique
  email                    String                    @unique
  password                 String
  fullName                 String
  dayStart                 String                    @default("00:00")
  onboardingCompleted      Boolean                   @default(false)
  created_at               DateTime                  @default(now())
  updated_at               DateTime                  @updatedAt
  habits                   Habit[]
  habitTrackings           HabitTracking[]
  memberships              Membership[]
  sentFriendRequests       FriendRequest[]           @relation("SentFriendRequests")
  receivedFriendRequests   FriendRequest[]           @relation("ReceivedFriendRequests")
  friendships              Friendship[]              @relation("UserFriendships") // Friendships initiated by the user
  friendFriendships        Friendship[]              @relation("FriendFriendships") // Friendships where the user is the friend
  streaks                  Streak[]                  @relation("UserStreaks")
  groups                   Group[]                   @relation("groups")
  conversationParticipants ConversationParticipant[] // All conversation memberships for this user
  Message                  Message[]
  HabitParticipation       HabitParticipation[]
}

// NEXT IS TO MAKE SURE DAYSTART AND ONBOARDING COMPLETED IN THE FORM OF API CALLS
// FIX THE STREAK CALCULATION USING PROPER DAY STARTS AND TEST
// FINISH HABIT ROUTES
// FIGURE OUT GROUP HABITS
// DO CONVERSATIONS

model Group {
  id             String      @id @default(uuid())
  name           String
  description    String?
  creator        User        @relation("groups", fields: [creator_id], references: [id])
  creator_id     String
  groupHabit     GroupHabit  @relation("GroupHabitRelation", fields: [groupHabitId], references: [id], onDelete: Cascade)
  groupHabitId   String      @unique
  created_at     DateTime    @default(now())
  updated_at     DateTime    @updatedAt
  memberships    Membership[]
  conversation   Conversation?  @relation("GroupConversation")
}

model Membership {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_id   String
  group     Group    @relation(fields: [group_id], references: [id], onDelete: Cascade)
  group_id  String
  role      Role     @default(USER)
  joined_at DateTime @default(now())

  @@unique([user_id, group_id])
  @@index([user_id])
  @@index([group_id])
}

model FriendRequest {
  id          String   @id @default(uuid())
  sender      User     @relation("SentFriendRequests", fields: [sender_id], references: [id], onDelete: Cascade)
  sender_id   String
  receiver    User     @relation("ReceivedFriendRequests", fields: [receiver_id], references: [id], onDelete: Cascade)
  receiver_id String
  status      String   @default("pending")
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  @@unique([sender_id, receiver_id])
  @@index([sender_id])
  @@index([receiver_id])
}

model Friendship {
  id         String   @id @default(uuid())
  user       User     @relation("UserFriendships", fields: [user_id], references: [id], onDelete: Cascade)
  user_id    String
  friend     User     @relation("FriendFriendships", fields: [friend_id], references: [id], onDelete: Cascade)
  friend_id  String
  created_at DateTime @default(now())

  @@unique([user_id, friend_id])
  @@index([user_id])
  @@index([friend_id])
}

model Habit {
  id                 String               @id @default(uuid())
  user               User                 @relation(fields: [user_id], references: [id])
  user_id            String
  title              String
  description        String?
  frequency_count    Int
  frequency_period   FrequencyPeriod
  goalStreak         Int?
  created_at         DateTime             @default(now())
  updated_at         DateTime             @updatedAt
  habitTrackings     HabitTracking[]
  streak             Streak?              @relation("HabitStreaks") // Changed from an array to a single relation
  HabitParticipation HabitParticipation[]

  @@index([user_id])
}

model HabitTracking {
  id         String   @id @default(uuid())
  habit      Habit    @relation(fields: [habit_id], references: [id], onDelete: Cascade)
  habit_id   String
  user       User     @relation(fields: [user_id], references: [id])
  user_id    String
  date       DateTime
  notes      String?
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@unique([habit_id, user_id, date])
  @@index([habit_id])
  @@index([user_id])
  @@index([date])
}

model GroupHabit {
  id                String       @id @default(uuid())
  group             Group?       @relation("GroupHabitRelation")
  title             String               
  frequency_count   Int
  frequency_period  FrequencyPeriod
  goalStreak        Int?
  dayStart          String       @default("00:00")
  created_at        DateTime     @default(now())
  updated_at        DateTime     @updatedAt
  participations    HabitParticipation[]
}

model HabitParticipation {
  id           String     @id @default(uuid())
  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String
  habit        Habit      @relation(fields: [habitId], references: [id], onDelete: Cascade)
  habitId      String
  groupHabit   GroupHabit @relation(fields: [groupHabitId], references: [id], onDelete: Cascade)
  groupHabitId String
  joined_at    DateTime   @default(now())

  @@unique([userId, groupHabitId])
}

model Streak {
  id             String   @id @default(uuid())
  habit          Habit    @relation("HabitStreaks", fields: [habit_id], references: [id], onDelete: Cascade)
  habit_id       String   @unique
  user           User     @relation("UserStreaks", fields: [user_id], references: [id], onDelete: Cascade)
  user_id        String
  current_streak Int      @default(0)
  max_streak     Int      @default(0)
  last_updated   DateTime
  created_at     DateTime @default(now())
  updated_at     DateTime @updatedAt
}

model Conversation {
  id           String                    @id @default(uuid())
  groupId      String?                   @unique
  group        Group?                    @relation("GroupConversation", fields: [groupId], references: [id], onDelete: Cascade)
  isGroup      Boolean                   @default(false) // false for DMs, true for group chats
  name         String? // Optional: e.g., a group name or conversation title
  created_at   DateTime                  @default(now())
  updated_at   DateTime                  @updatedAt
  messages     Message[]
  participants ConversationParticipant[]
}

model ConversationParticipant {
  id             String       @id @default(uuid())
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  conversationId String
  user           User         @relation(fields: [userId], references: [id])
  userId         String
  lastReadAt     DateTime? // Optional field to track when the participant last read messages

  @@unique([conversationId, userId])
}

model Message {
  id             String       @id @default(uuid())
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  conversationId String
  sender         User         @relation(fields: [senderId], references: [id])
  senderId       String
  content        String
  media_url      String?
  created_at     DateTime     @default(now())
  updated_at     DateTime     @updatedAt
  is_deleted     Boolean      @default(false)

  @@index([conversationId])
  @@index([senderId])
  @@index([created_at])
}
