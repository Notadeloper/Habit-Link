// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

enum FrequencyPeriod {
  day
  week
  month
  custom
}

model User {
  id                     String          @id @default(uuid())
  username               String          @unique
  email                  String          @unique
  password               String
  fullName               String
  created_at             DateTime        @default(now())
  updated_at             DateTime        @updatedAt
  habits                 Habit[]
  habitTrackings         HabitTracking[]
  memberships            Membership[]
  sentFriendRequests     FriendRequest[] @relation("SentFriendRequests")
  receivedFriendRequests FriendRequest[] @relation("ReceivedFriendRequests")
  friendships            Friendship[]    @relation("UserFriendships") // Friendships initiated by the user
  friendFriendships      Friendship[]    @relation("FriendFriendships") // Friendships where the user is the friend
  sentMessages           Message[]       @relation("SentMessages")
  receivedMessages       Message[]       @relation("ReceivedMessages")
  streaks                Streak[]        @relation("UserStreaks")
  groups                 Group[]         @relation("groups")
}

model Group {
  id          String       @id @default(uuid())
  name        String
  description String?
  creator     User         @relation("groups", fields: [creator_id], references: [id])
  creator_id  String
  created_at  DateTime     @default(now())
  updated_at  DateTime     @updatedAt
  memberships Membership[]
  habits      Habit[]
  messages    Message[]
}

model Membership {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [user_id], references: [id])
  user_id   String
  group     Group    @relation(fields: [group_id], references: [id])
  group_id  String
  role      Role     @default(USER)
  joined_at DateTime @default(now())

  @@unique([user_id, group_id])
  @@index([user_id])
  @@index([group_id])
}

model FriendRequest {
  id          String   @id @default(uuid())
  sender      User     @relation("SentFriendRequests", fields: [sender_id], references: [id])
  sender_id   String
  receiver    User     @relation("ReceivedFriendRequests", fields: [receiver_id], references: [id])
  receiver_id String
  status      String   @default("pending")
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  @@unique([sender_id, receiver_id])
  @@index([sender_id])
  @@index([receiver_id])
}

model Friendship {
  id         String   @id @default(uuid())
  user       User     @relation("UserFriendships", fields: [user_id], references: [id])
  user_id    String
  friend     User     @relation("FriendFriendships", fields: [friend_id], references: [id])
  friend_id  String
  created_at DateTime @default(now())

  @@unique([user_id, friend_id])
  @@index([user_id])
  @@index([friend_id])
}

model Habit {
  id               String          @id @default(uuid())
  user             User            @relation(fields: [user_id], references: [id])
  user_id          String
  group            Group?          @relation(fields: [group_id], references: [id])
  group_id         String?
  title            String
  description      String?
  frequency_count  Int
  frequency_period FrequencyPeriod
  custom_period    Int?
  goal             Int?
  start_date       DateTime?
  end_date         DateTime?
  created_at       DateTime        @default(now())
  updated_at       DateTime        @updatedAt
  habitTrackings   HabitTracking[]
  streaks          Streak[]        @relation("HabitStreaks")

  @@index([user_id])
  @@index([group_id])
}

model HabitTracking {
  id         String   @id @default(uuid())
  habit      Habit    @relation(fields: [habit_id], references: [id])
  habit_id   String
  user       User     @relation(fields: [user_id], references: [id])
  user_id    String
  date       DateTime
  status     String   @default("completed")
  notes      String?
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@unique([habit_id, user_id, date])
  @@index([habit_id])
  @@index([user_id])
  @@index([date])
}

model Streak {
  id             String   @id @default(uuid())
  habit          Habit    @relation("HabitStreaks", fields: [habit_id], references: [id])
  habit_id       String
  user           User     @relation("UserStreaks", fields: [user_id], references: [id])
  user_id        String
  current_streak Int      @default(0)
  max_streak     Int      @default(0)
  last_updated   DateTime
  created_at     DateTime @default(now())
  updated_at     DateTime @updatedAt

  @@unique([habit_id, user_id])
  @@index([habit_id])
  @@index([user_id])
}

model Message {
  id          String   @id @default(uuid())
  group       Group    @relation(fields: [group_id], references: [id])
  group_id    String
  sender      User     @relation("SentMessages", fields: [sender_id], references: [id])
  sender_id   String
  receiver    User?    @relation("ReceivedMessages", fields: [receiver_id], references: [id])
  receiver_id String?
  content     String
  media_url   String?
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
  is_deleted  Boolean  @default(false)

  @@index([group_id])
  @@index([sender_id])
  @@index([receiver_id])
  @@index([created_at])
}
