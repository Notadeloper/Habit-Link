// This is your Prisma schema file

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

enum FrequencyPeriod {
  day
  week
  month
  custom
}

model User {
  id                       String                    @id @default(uuid())
  username                 String                    @unique
  email                    String                    @unique
  password                 String
  fullName                 String
  created_at               DateTime                  @default(now())
  updated_at               DateTime                  @updatedAt
  habits                   Habit[]
  habitTrackings           HabitTracking[]
  memberships              Membership[]
  sentFriendRequests       FriendRequest[]           @relation("SentFriendRequests")
  receivedFriendRequests   FriendRequest[]           @relation("ReceivedFriendRequests")
  friendships              Friendship[]              @relation("UserFriendships") // Friendships initiated by the user
  friendFriendships        Friendship[]              @relation("FriendFriendships") // Friendships where the user is the friend
  streaks                  Streak[]                  @relation("UserStreaks")
  groups                   Group[]                   @relation("groups")
  conversationParticipants ConversationParticipant[] // All conversation memberships for this user
  Message                  Message[]
  GroupHabitProposal       GroupHabitProposal[]
  GroupHabitAgreement      GroupHabitAgreement[]
}

model Group {
  id                 String               @id @default(uuid())
  name               String
  description        String?
  creator            User                 @relation("groups", fields: [creator_id], references: [id])
  creator_id         String
  created_at         DateTime             @default(now())
  updated_at         DateTime             @updatedAt
  memberships        Membership[]
  conversationId     String?              @unique // Added @unique here
  conversation       Conversation?        @relation("GroupConversation", fields: [conversationId], references: [id], onDelete: Cascade)
  habitGroups        HabitGroup[]
  GroupHabitProposal GroupHabitProposal[]
}

model Membership {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [user_id], references: [id])
  user_id   String
  group     Group    @relation(fields: [group_id], references: [id], onDelete: Cascade)
  group_id  String
  role      Role     @default(USER)
  joined_at DateTime @default(now())

  @@unique([user_id, group_id])
  @@index([user_id])
  @@index([group_id])
}

model FriendRequest {
  id          String   @id @default(uuid())
  sender      User     @relation("SentFriendRequests", fields: [sender_id], references: [id])
  sender_id   String
  receiver    User     @relation("ReceivedFriendRequests", fields: [receiver_id], references: [id])
  receiver_id String
  status      String   @default("pending")
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  @@unique([sender_id, receiver_id])
  @@index([sender_id])
  @@index([receiver_id])
}

model Friendship {
  id         String   @id @default(uuid())
  user       User     @relation("UserFriendships", fields: [user_id], references: [id])
  user_id    String
  friend     User     @relation("FriendFriendships", fields: [friend_id], references: [id])
  friend_id  String
  created_at DateTime @default(now())

  @@unique([user_id, friend_id])
  @@index([user_id])
  @@index([friend_id])
}

model Habit {
  id               String          @id @default(uuid())
  user             User            @relation(fields: [user_id], references: [id])
  user_id          String
  title            String
  description      String?
  frequency_count  Int
  frequency_period FrequencyPeriod
  goalStreak       Int?
  created_at       DateTime        @default(now())
  updated_at       DateTime        @updatedAt
  habitTrackings   HabitTracking[]
  streaks          Streak[]        @relation("HabitStreaks")
  habitGroups      HabitGroup[]

  @@index([user_id])
}

model HabitTracking {
  id         String   @id @default(uuid())
  habit      Habit    @relation(fields: [habit_id], references: [id], onDelete: Cascade)
  habit_id   String
  user       User     @relation(fields: [user_id], references: [id])
  user_id    String
  date       DateTime
  status     String   @default("completed")
  notes      String?
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@unique([habit_id, user_id, date])
  @@index([habit_id])
  @@index([user_id])
  @@index([date])
}

model HabitGroup {
  habit    Habit    @relation(fields: [habitId], references: [id])
  habitId  String
  group    Group    @relation(fields: [groupId], references: [id])
  groupId  String
  added_at DateTime @default(now())

  @@unique([habitId, groupId])
}

model GroupHabitProposal {
  id               String                @id @default(uuid())
  group            Group                 @relation(fields: [groupId], references: [id], onDelete: Cascade)
  groupId          String
  title            String
  description      String?
  frequency_period FrequencyPeriod
  proposer         User                  @relation(fields: [proposerId], references: [id])
  proposerId       String
  created_at       DateTime              @default(now())
  agreements       GroupHabitAgreement[]
}

model GroupHabitAgreement {
  id         String             @id @default(uuid())
  proposal   GroupHabitProposal @relation(fields: [proposalId], references: [id], onDelete: Cascade)
  proposalId String
  user       User               @relation(fields: [userId], references: [id])
  userId     String
  decision   Boolean // true = agree, false = disagree
  created_at DateTime           @default(now())

  @@unique([proposalId, userId])
}

model Streak {
  id             String   @id @default(uuid())
  habit          Habit    @relation("HabitStreaks", fields: [habit_id], references: [id])
  habit_id       String
  user           User     @relation("UserStreaks", fields: [user_id], references: [id])
  user_id        String
  current_streak Int      @default(0)
  max_streak     Int      @default(0)
  last_updated   DateTime
  created_at     DateTime @default(now())
  updated_at     DateTime @updatedAt

  @@unique([habit_id, user_id])
  @@index([habit_id])
  @@index([user_id])
}

model Conversation {
  id           String                    @id @default(uuid())
  isGroup      Boolean                   @default(false) // false for DMs, true for group chats
  name         String? // Optional name for group conversations
  created_at   DateTime                  @default(now())
  updated_at   DateTime                  @updatedAt
  messages     Message[]
  participants ConversationParticipant[]
  group        Group?                    @relation("GroupConversation")
}

model ConversationParticipant {
  id             String       @id @default(uuid())
  conversation   Conversation @relation(fields: [conversationId], references: [id])
  conversationId String
  user           User         @relation(fields: [userId], references: [id])
  userId         String
  lastReadAt     DateTime? // Optional field to track when the participant last read messages

  @@unique([conversationId, userId])
}

model Message {
  id             String       @id @default(uuid())
  conversation   Conversation @relation(fields: [conversationId], references: [id])
  conversationId String
  sender         User         @relation(fields: [senderId], references: [id])
  senderId       String
  content        String
  media_url      String?
  created_at     DateTime     @default(now())
  updated_at     DateTime     @updatedAt
  is_deleted     Boolean      @default(false)

  @@index([conversationId])
  @@index([senderId])
  @@index([created_at])
}
